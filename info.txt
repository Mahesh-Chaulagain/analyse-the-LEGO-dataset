# Adding Images
-> add an image in the text cell using the HTML <img> tag with src of the image.
-> for e.g. 
	<img src="assets/bricks.jpg">

# Section heading
-> add section headings using tags like <h1> or <h2>
-> use the # symbol as shortcut as <h1> equals # <h2> equals ## and so on

# .agg() function:
-> to summarise data use the .groupby() function
-> if we want to run even more operations based on a particular DataFrame column we use .agg() method
-> example: to calculate the different themes by calendar year
	themes_by_year = sets.groupbt('year').agg({"theme_id": pd.Series.nunique})

-> the .agg() method takes a dictionary as an argument where we specify which operation we'd like to apply to
   each column

# .rename() method
-> used to change column name
-> example: to change "theme_id" column name to "nr_themes"
	themes_by_year.rename(columns={'theme_id':'nr_themes'}, inplace = True)

# Two separate axes
-> if the scale of two dataframes are different we need to use both the axes to denote the range
-> example: if the themes number ranges between 0 and 90, while the number of sets ranges between  0 and 900 
   then we need to be able to configure and plot our data on two separate axes on the same chart. this involves
   getting hold of an axis object from Matplotlib

	ax1 = plt.gca() # get current axis
	ax2 = ax1.twinx() # create another axis that share the same x-axis

-> using the .twinx() method allows ax1 and ax2 to share the same x-axis
-> set color in lines and axis to differentiate them


   